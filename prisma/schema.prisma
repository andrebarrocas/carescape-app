// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  pseudonym String?
  colors    Color[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Color {
  id            String        @id @default(cuid())
  name          String
  hex           String
  description   String
  location      String
  coordinates   String?       // JSON string with lat/lng
  season        String
  dateCollected DateTime
  userId        String
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  materials     Material[]
  processes     Process[]
  mediaUploads  MediaUpload[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("colors")
  @@index([userId])
}

model Material {
  id          String   @id @default(cuid())
  name        String
  partUsed    String
  originNote  String
  colorId     String
  color       Color    @relation(fields: [colorId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("materials")
  @@index([colorId])
}

model Process {
  id          String   @id @default(cuid())
  technique   String
  application String
  notes       String
  colorId     String
  color       Color    @relation(fields: [colorId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("processes")
  @@index([colorId])
}

model MediaUpload {
  id          String   @id @default(cuid())
  filename    String
  mimetype    String
  data        Bytes    // Binary data storage
  type        String   // 'process' or 'outcome'
  colorId     String
  color       Color    @relation(fields: [colorId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("media_uploads")
  @@index([colorId])
} 