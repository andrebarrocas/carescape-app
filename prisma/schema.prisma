// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  image         String?
  pseudonym     String?
  password      String?   // Hashed password for credentials provider
  colors        Color[]
  comments      Comment[]
  accounts      Account[] // Relation to accounts for OAuth providers
  sessions      Session[] // Relation to sessions
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Color {
  id            String        @id @default(cuid())
  name          String
  hex           String
  description   String
  location      String
  coordinates   String?       // JSON string with lat/lng
  bioregion     String?      // AI-generated bioregion description
  bioregionMap  String?      // URL to the bioregion map image
  season        String
  dateCollected DateTime
  userId        String
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  materials     Material[]
  processes     Process[]
  mediaUploads  MediaUpload[]
  comments      Comment[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("colors")
  @@index([userId])
}

model Material {
  id          String   @id @default(cuid())
  name        String
  partUsed    String
  originNote  String
  colorId     String
  color       Color    @relation(fields: [colorId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("materials")
  @@index([colorId])
}

model Process {
  id          String   @id @default(cuid())
  technique   String
  application String
  notes       String
  colorId     String
  color       Color    @relation(fields: [colorId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("processes")
  @@index([colorId])
}

model MediaUpload {
  id          String   @id @default(cuid())
  filename    String
  mimetype    String
  type        String   // 'process', 'outcome', or 'landscape'
  data        Bytes    // Binary data of the file
  caption     String?  // Caption for the image
  colorId     String?  // Make colorId optional for initial upload
  color       Color?   @relation(fields: [colorId], references: [id], onDelete: Cascade)
  comments    Comment[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("media_uploads")
  @@index([colorId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  colorId   String
  color     Color    @relation(fields: [colorId], references: [id], onDelete: Cascade)
  mediaId   String
  media     MediaUpload @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
  @@index([colorId])
  @@index([userId])
  @@index([mediaId])
} 